# $lic$
# Copyright (C) 2015-2020 by Massachusetts Institute of Technology
#
# This file is part of libspin.
#
# libspin is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, version 2.
#
# libspin was developed as part of the Swarm architecture simulator. If you
# use this software in your research, we request that you reference the Swarm
# paper ("A Scalable Architecture for Ordered Parallelism", Jeffrey et al.,
# MICRO-48, 2015) as the source of libspin in any publications that use this
# software, and that you send us a citation of your work.
#
# libspin is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.

from __future__ import (absolute_import, division, print_function)

import os

Import('env')

# fast speed requires AVX.
# fast speed implies building both fast and slow
AddOption('--libspinSpeed', type=str, default='fast')
assert GetOption('libspinSpeed') in ['fast', 'slow']

includePath = os.path.abspath(os.path.join(Dir('.').srcnode().abspath, '../include/'))

slowEnv = env.Clone()
slowEnv.Append(CPPPATH = [includePath])
slowEnv.Append(CPPDEFINES = 'SPIN_SLOW')
slowEnv['OBJSUFFIX'] = '.oslow'
slowlib = slowEnv.StaticLibrary(target='libspin_slow.a', source='spin.cpp')

fastlib = None
if GetOption('libspinSpeed') == 'fast':
   fastEnv = env.Clone()
   fastEnv.Append(CPPPATH = [includePath])
   # AVX is required by spin-fast; this compiles SNB-compatible code.
   # To build for an architecture without AVX, use the speed=slow scons option.
   archFlags = ['-march=corei7-avx', '-mavx', '-msse4.1', '-msse4.2']
   fastEnv.Append(CPPFLAGS = archFlags)

   fastlib = fastEnv.StaticLibrary(target='libspin_fast.a', source='spin.cpp')

Return('slowlib', 'fastlib')
